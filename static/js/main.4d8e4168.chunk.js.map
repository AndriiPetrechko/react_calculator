{"version":3,"sources":["App.js","Components/Keypad.js","Components/Output.js","serviceWorker.js","index.js"],"names":["App","state","result","buttonPresed","buttonName","calculate","setState","backspace","slice","e","eval","reset","className","this","Component","Keypad","props","target","name","onClick","Output","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8xCAMqBA,I,yqBACnBC,MAAQ,CACNC,OAAQ,0D,MAEVC,aAAe,SAAAC,GACM,MAAfA,EACF,MAAKC,YACyB,0DAArB,MAAKJ,MAAMC,OACpB,MAAKI,SAAS,CACZJ,OAAQ,GAAKE,IAES,OAAfA,EACT,MAAKG,YAEL,MAAKD,SAAS,CACZJ,OAAQ,MAAKD,MAAMC,OAASE,K,MAGlCG,UAAY,WACV,MAAKD,SAAS,CACZJ,OAAQ,MAAKD,MAAMC,OAAOM,MAAM,GAAI,M,MAGxCH,UAAY,SAAAI,GACV,IACE,MAAKH,SAAS,CACZJ,OAAQQ,KAAK,MAAKT,MAAMC,UAE1B,MAAOO,GACP,MAAKH,SAAS,CACZJ,OAAQ,Y,MAIdS,MAAQ,SAAAF,GACN,MAAKH,SAAS,CACZJ,OAAQ,M,+LAIV,OACE,kEAAKU,UAAU,WACb,2DAAC,kDAAD,CAAQV,OAAQW,KAAKZ,MAAMC,SAC3B,2DAAC,kDAAD,CACEC,aAAcU,KAAKV,aACnBQ,MAAOE,KAAKF,QAEd,kEAAKC,UAAU,QAAf,6B,KA/CyBE,+C,+GCHZC,G,kNACjBZ,aAAe,SAAAM,GACX,EAAKO,MAAMb,aAAaM,EAAEQ,OAAOC,O,uDAGjC,OACI,yBAAKN,UAAU,cACX,yBAAKA,UAAU,mBACX,4BAAQM,KAAK,IAAIC,QAASN,KAAKG,MAAML,OAArC,OACA,4BAAQO,KAAK,KAAKC,QAASN,KAAKV,cAAhC,QACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,QAEJ,yBAAKS,UAAU,mBACX,4BAAQM,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,QAEJ,yBAAKS,UAAU,mBACX,4BAAQM,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,QAEJ,yBAAKS,UAAU,mBACX,4BAAQM,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,QAEJ,yBAAKS,UAAU,mBACX,4BAAQM,KAAK,MAAMC,QAASN,KAAKV,cAAjC,QACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,OACA,4BAAQe,KAAK,IAAIC,QAASN,KAAKV,cAA/B,a,GAnCgBW,e,+GCAfM,G,6KAEb,OACI,yBAAKR,UAAU,iBACX,+BAAKC,KAAKG,MAAMd,OAAhB,U,GAJoBY,e,oMCShBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC5B,EAAA,EAAD,OAEF6B,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d8e4168.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Keypad from './Components/Keypad';\nimport Output from './Components/Output';\nimport './App.css';\n\n\nexport default class App extends Component {\n  state = {\n    result: 'результат'\n  };\n  buttonPresed = buttonName => {\n    if (buttonName === \"=\") {\n      this.calculate();\n    } else if (this.state.result == 'результат') {\n      this.setState({\n        result: '' + buttonName\n      })\n    } else if (buttonName === \"CE\") {\n      this.backspace();\n    } else\n      this.setState({\n        result: this.state.result + buttonName\n      })\n  };\n  backspace = () => {\n    this.setState({\n      result: this.state.result.slice(0, -1)\n    });\n  }\n  calculate = e => {\n    try {\n      this.setState({\n        result: eval(this.state.result)\n      });\n    } catch (e) {\n      this.setState({\n        result: \"error\"\n      });\n    }\n  };\n  reset = e => {\n    this.setState({\n      result: ''\n    })\n  };\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Output result={this.state.result} />\n        <Keypad\n          buttonPresed={this.buttonPresed}\n          reset={this.reset}\n        />\n        <div className=\"logo\">\n          Made by A. Petrechko\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\r\nimport keypad from './keypad.css';\r\n\r\nexport default class Keypad extends Component {\r\n    buttonPresed = e => {\r\n        this.props.buttonPresed(e.target.name);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"key__group\">\r\n                <div className=\"key_group__item\">\r\n                    <button name=\"C\" onClick={this.props.reset}> C </button>\r\n                    <button name=\"CE\" onClick={this.buttonPresed}> CE </button>\r\n                    <button name=\"(\" onClick={this.buttonPresed}> ( </button>\r\n                    <button name=\")\" onClick={this.buttonPresed}> ) </button>\r\n                </div>\r\n                <div className=\"key_group__item\">\r\n                    <button name=\"7\" onClick={this.buttonPresed}> 7 </button>\r\n                    <button name=\"8\" onClick={this.buttonPresed}> 8 </button>\r\n                    <button name=\"9\" onClick={this.buttonPresed}> 9 </button>\r\n                    <button name=\"+\" onClick={this.buttonPresed}> + </button>\r\n                </div>\r\n                <div className=\"key_group__item\">\r\n                    <button name=\"4\" onClick={this.buttonPresed}> 4 </button>\r\n                    <button name=\"5\" onClick={this.buttonPresed}> 5 </button>\r\n                    <button name=\"6\" onClick={this.buttonPresed}> 6 </button>\r\n                    <button name=\"-\" onClick={this.buttonPresed}> - </button>\r\n                </div>\r\n                <div className=\"key_group__item\">\r\n                    <button name=\"1\" onClick={this.buttonPresed}> 1 </button>\r\n                    <button name=\"2\" onClick={this.buttonPresed}> 2 </button>\r\n                    <button name=\"3\" onClick={this.buttonPresed}> 3 </button>\r\n                    <button name=\"*\" onClick={this.buttonPresed}> * </button>\r\n                </div>\r\n                <div className=\"key_group__item\">\r\n                    <button name=\"**2\" onClick={this.buttonPresed}> ^2 </button>\r\n                    <button name=\"=\" onClick={this.buttonPresed}> = </button>\r\n                    <button name=\".\" onClick={this.buttonPresed}> . </button>\r\n                    <button name=\"/\" onClick={this.buttonPresed}> / </button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './output.css';\r\n\r\nexport default class Output extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"result__field\">\r\n                <p> {this.props.result} </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}